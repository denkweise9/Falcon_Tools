// Falcon_Tools.fal
// This program will grow as the language grows

// The functions that take user input are designed for users who can't program.
// The functions that take parameters from function call are designed to be used by programmers.

/*
    Falcon_Tools.fal is a module to contain helpful functions
    Falcon is a new multi-paradigm GNU programming language.
    http://www.falconpl.org/ for more information.
    Copyright (C) 2017     Authors: Denkweise9

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.

*/

// if you don't have the curl module, comment this out.

import from curl

load socket
load threading
load process
load compiler

print('h'); printl("ey, welcome to the Falcon Programming Language")  // It's a joke.

/* Basic Tools */

function iterl(obj)  // this makes a new line after each iter item
    for each in obj
        printl(each)
    end
end

function iter(obj) // this does not
    for each in obj
        print(each + " ")
    end
end


function sub(x,y)
    return (x-y)
end

function add(x,y)
    return (x+y)
end

function multi(x,y)
    return (x*y)
end

function divide(x,y)
    return (x/y)
end

function exp(x,y)
    return (x**y)
end



function listeach(x)
    for each in [x]
        return [each]
    end
end
//  http://www.falconpl.org/project_docs/core/core_Stream.html

function read_file(file) //  This works " read_file("/home/user/Desktop/Perl_experiment.pl") "
    line_number = 0
    file_data = InputStream( file, FILE_SHARE_READ )
    while(line = file_data.grabLine()) != 0
        > "Line ", line_number, ":", line
        line_number += 1
    end
    file_data.close()
    return argd()
end

//function assumes utf-8 but can be changed in function call
//needs work
function write_to_file(uri, data, encoding='utf-8')
    line_number = 0
    file = writeURI(uri, data, encoding)
        for each line in file
            line_number += 1
        end
    printl("Now writing data in utf-8")
    return file
end

// use FILE_EXCLUSIVE if you want the function to have ownership of the file
 
function ReadIO(stream)  // This needs improvment and will not run without elevated privlages
    line_number = 0
    stream_data = IOStream( stream, FILE_SHARE_READ ) // We use FILE_SHARE_READ because we only want to alter the data, not inject input
    while(line = stream_data.readLine()) != 0   // readLine() is safer for buffers and I/O
        > "Data_Line: ", line_number, ":", line
        line_number += 1
    end
    stream_data.close()
    return argd()
end
    
// if you prefer linux comands like me, these will be useful to you
function dir()
    return dirCurrent()
end
pwd = dir()

function cd(path)
    return dirChange(path)
end

function mkdir(name, path) // path = where you put this folder, name is the name of folder
    return dirMake(name, path)
end
    
function curl(url)
    data = curl.dload( str(url) )
    return data
end

function rm(dir)
    return dirRemove(dir)
end

function chmod(file, mode)
    return fileChmod(file, mode)
end
    

//classes here


//singleton objects here
    
                                     /* Functions for errands in life  */
                                     
function get_interest()
    > "Enter the interest rate, per year "
    interest = float( input() )
    > "Enter the amount to apply interest to "
    amount = float( input() )
    > "Enter the number of years to apply interest"
    years = int( input() )
    
    total = (((interest * amount) * years) + amount )
    return total
end


function get_tax()
    >> "Enter the price: > "
    price = float( input() )
    while price == nil
        print("Give valid input: ")
        price = float( input() )
        end

    >> "Enter tax percentage: > "
    tax = float( input() )
    while tax == nil
        print("Give valid input: ")
        price = float( input() )
        end

    extra = ( tax * price )
    total = ( price + extra )
    printl("The total will be ", total)
    

/* Random */

function roulette()  // This plays russian roulette
    iff ( random() > 0.5, .[lit.[printl "BANG!"]], .[ lit.[printl "safe"]]) ()
end

/* The code below is designed for non-programmers, basically it will ask the user what he/she
// wants to do. Then will call functions that ask for input, and will call these functions on that input
// It is not done by any means
*/

options = [ "get_tax", "iter", "iterl" ]


function Toolbox()
    printl("What would you like to do? Here are your options: ")
    iter(options)
    choice = str( input() )
    switch choice
        case nil
            printl("You want to do nothing? ")
        case "get_tax"
        
        default
            printl("You did not use one of the choices provided")

    end
// More "practical" functions for networking and system admin will be added as Falcon Feathers grow
// Falcon Feathers is a library for the Falcon Programming Language
end
